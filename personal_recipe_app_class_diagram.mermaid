classDiagram
    class Recipe {
        -string id
        -string title
        -string description
        -int servings
        -int prepTime
        -int cookTime
        -Date createdAt
        -Date updatedAt
        -bool favorite
        +constructor(recipeData)
        +toJSON() object
        +fromJSON(json) Recipe
    }
    
    class Ingredient {
        -string id
        -string recipeId
        -string name
        -number amount
        -string unit
        -string note
        +constructor(ingredientData)
        +toJSON() object
        +fromJSON(json) Ingredient
    }
    
    class CookingStep {
        -string id
        -string recipeId
        -int stepNumber
        -string instruction
        -string[] imageUrls
        -int timerDuration
        +constructor(stepData)
        +toJSON() object
        +fromJSON(json) CookingStep
    }
    
    class YouTubeVideo {
        -string id
        -string recipeId
        -string videoId
        -string title
        -string channelTitle
        -string thumbnailUrl
        -string description
        -Date publishedAt
        +constructor(videoData)
        +toJSON() object
        +fromJSON(json) YouTubeVideo
        +getEmbedUrl() string
    }
    
    class Category {
        -string id
        -string name
        -string color
        -string icon
        +constructor(categoryData)
        +toJSON() object
        +fromJSON(json) Category
    }
    
    class Tag {
        -string id
        -string name
        +constructor(tagData)
        +toJSON() object
        +fromJSON(json) Tag
    }
    
    class ShoppingItem {
        -string id
        -string name
        -number amount
        -string unit
        -string recipeId
        -bool checked
        +constructor(itemData)
        +toJSON() object
        +fromJSON(json) ShoppingItem
        +toggleChecked() bool
    }
    
    class ShoppingList {
        -string id
        -string name
        -Date createdAt
        -ShoppingItem[] items
        +constructor(listData)
        +addItem(item) void
        +removeItem(itemId) void
        +clearCheckedItems() void
        +getAllItems() ShoppingItem[]
        +getCheckedItems() ShoppingItem[]
        +getUncheckedItems() ShoppingItem[]
    }
    
    class RecipeService {
        -StorageService storageService
        -SyncService syncService
        +constructor(storageService, syncService)
        +getAllRecipes() Promise~Recipe[]~
        +getRecipeById(id) Promise~Recipe~
        +createRecipe(recipeData) Promise~Recipe~
        +updateRecipe(id, recipeData) Promise~Recipe~
        +deleteRecipe(id) Promise~boolean~
        +getFavoriteRecipes() Promise~Recipe[]~
        +toggleFavorite(id) Promise~Recipe~
        +getRecipesByCategory(categoryId) Promise~Recipe[]~
        +getRecipesByTag(tagId) Promise~Recipe[]~
    }
    
    class IngredientService {
        -StorageService storageService
        -SyncService syncService
        +constructor(storageService, syncService)
        +getIngredientsByRecipeId(recipeId) Promise~Ingredient[]~
        +addIngredient(ingredientData) Promise~Ingredient~
        +updateIngredient(id, ingredientData) Promise~Ingredient~
        +deleteIngredient(id) Promise~boolean~
        +deleteIngredientsByRecipeId(recipeId) Promise~boolean~
    }
    
    class StepService {
        -StorageService storageService
        -SyncService syncService
        +constructor(storageService, syncService)
        +getStepsByRecipeId(recipeId) Promise~CookingStep[]~
        +addStep(stepData) Promise~CookingStep~
        +updateStep(id, stepData) Promise~CookingStep~
        +deleteStep(id) Promise~boolean~
        +reorderSteps(recipeId, stepOrder) Promise~CookingStep[]~
        +deleteStepsByRecipeId(recipeId) Promise~boolean~
    }
    
    class YouTubeService {
        -string apiKey
        -StorageService storageService
        +constructor(apiKey, storageService)
        +getVideoInfo(videoUrl) Promise~YouTubeVideo~
        +getVideoById(videoId) Promise~YouTubeVideo~
        +linkVideoToRecipe(recipeId, videoData) Promise~YouTubeVideo~
        +getLinkedVideos(recipeId) Promise~YouTubeVideo[]~
        +removeVideoFromRecipe(recipeId, videoId) Promise~boolean~
    }
    
    class CategoryService {
        -StorageService storageService
        -SyncService syncService
        +constructor(storageService, syncService)
        +getAllCategories() Promise~Category[]~
        +getCategoryById(id) Promise~Category~
        +createCategory(categoryData) Promise~Category~
        +updateCategory(id, categoryData) Promise~Category~
        +deleteCategory(id) Promise~boolean~
    }
    
    class TagService {
        -StorageService storageService
        -SyncService syncService
        +constructor(storageService, syncService)
        +getAllTags() Promise~Tag[]~
        +getTagById(id) Promise~Tag~
        +createTag(tagData) Promise~Tag~
        +updateTag(id, tagData) Promise~Tag~
        +deleteTag(id) Promise~boolean~
    }
    
    class ShoppingListService {
        -StorageService storageService
        -SyncService syncService
        +constructor(storageService, syncService)
        +createShoppingList(name) Promise~ShoppingList~
        +getShoppingListById(id) Promise~ShoppingList~
        +getAllShoppingLists() Promise~ShoppingList[]~
        +updateShoppingList(id, listData) Promise~ShoppingList~
        +deleteShoppingList(id) Promise~boolean~
        +addItemsFromRecipe(listId, recipeId) Promise~ShoppingList~
        +updateItem(listId, itemId, itemData) Promise~ShoppingItem~
        +toggleItemChecked(listId, itemId) Promise~ShoppingItem~
    }
    
    class SearchService {
        -StorageService storageService
        +constructor(storageService)
        +searchRecipes(query) Promise~Recipe[]~
        +filterRecipesByIngredient(ingredientName) Promise~Recipe[]~
        +filterRecipesByCookTime(maxTime) Promise~Recipe[]~
        +filterRecipesByMultipleCriteria(criteria) Promise~Recipe[]~
    }
    
    class StorageService {
        -IndexedDB db
        +constructor()
        +initialize() Promise~void~
        +set(storeName, key, value) Promise~void~
        +get(storeName, key) Promise~any~
        +getAll(storeName) Promise~any[]~
        +remove(storeName, key) Promise~void~
        +clear(storeName) Promise~void~
        +query(storeName, predicate) Promise~any[]~
    }
    
    class SyncService {
        -FirebaseFirestore db
        -AuthService authService
        -StorageService localStorage
        +constructor(authService, localStorage)
        +initialize() Promise~void~
        +syncUp() Promise~void~
        +syncDown() Promise~void~
        +enableRealTimeSync() void
        +disableRealTimeSync() void
        +getLastSyncTime() Date
        +resolveConflicts(localData, remoteData) Promise~any~
    }
    
    class AuthService {
        -FirebaseAuth auth
        +constructor()
        +initialize() Promise~void~
        +signIn() Promise~User~
        +signOut() Promise~void~
        +getCurrentUser() User
        +isAuthenticated() boolean
        +onAuthStateChanged(callback) void
    }
    
    class TimerService {
        -Map activeTimers
        +constructor()
        +createTimer(duration, onComplete) string
        +startTimer(timerId) void
        +pauseTimer(timerId) void
        +stopTimer(timerId) void
        +getTimeRemaining(timerId) number
        +getAllActiveTimers() object[]
    }
    
    class RecipeRepository {
        -StorageService storage
        +constructor(storage)
        +save(recipe) Promise~Recipe~
        +findById(id) Promise~Recipe~
        +findAll() Promise~Recipe[]~
        +update(recipe) Promise~Recipe~
        +delete(id) Promise~boolean~
        +query(criteria) Promise~Recipe[]~
    }
    
    Recipe "1" -- "*" Ingredient : has
    Recipe "1" -- "*" CookingStep : has
    Recipe "1" -- "*" YouTubeVideo : references
    Recipe "*" -- "*" Category : belongs to
    Recipe "*" -- "*" Tag : has
    ShoppingList "1" -- "*" ShoppingItem : contains
    RecipeService -- Recipe : manages
    IngredientService -- Ingredient : manages
    StepService -- CookingStep : manages
    YouTubeService -- YouTubeVideo : manages
    CategoryService -- Category : manages
    TagService -- Tag : manages
    ShoppingListService -- ShoppingList : manages
    SearchService -- Recipe : searches
    RecipeService -- RecipeRepository : uses
    RecipeRepository -- StorageService : uses
    RecipeService -- SyncService : uses
    IngredientService -- SyncService : uses
    StepService -- SyncService : uses
    CategoryService -- SyncService : uses
    TagService -- SyncService : uses
    ShoppingListService -- SyncService : uses
    SyncService -- AuthService : uses
    SyncService -- StorageService : uses